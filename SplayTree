package asgn04;

import java.util.ArrayList;
import java.util.Collection;


public class SplayTree {

	private ArrayList<RankAndSize> allRanksAndSizes;
	private SplayNode root;
	private int count;

	public SplayTree(SplayNode r){
		root = r;
		allRanksAndSizes = new ArrayList<RankAndSize>();
	}
	public SplayTree(Comparable r){
		root = new SplayNode(r);
		allRanksAndSizes = new ArrayList<RankAndSize>();
	}
	public SplayTree(){
		root = null;
		allRanksAndSizes = new ArrayList<RankAndSize>();
	}
	public boolean isEmpty(){
		return (root == null);
	}
	public void clear(){
		root = null;
	}
	public void insert(Comparable ele)
	{
		SplayNode z = root;
		SplayNode p = null;
		while (z != null)
		{
			p = z;
			if (ele.compareTo(p.getData()) > 0)
				z = z.getRightChild();
			else if (ele.compareTo(p.getData()) < 0)
				z = z.getLeftChild();
			else{
				System.out.println("The node you are trying to insert already exists!");
				splay(z);
				return;
			}
		}
		z = new SplayNode(ele);
		if (p == null)
			root = z;
		else if (ele.compareTo(p.getData()) > 0){
			p.setRightChild(z);
		}
		else{
			p.setLeftChild(z);
		}
		z.setParent(p);

		splay(z);
		count++;
	}

	/** rotate **/
	public void makeLeftChildParent(SplayNode c, SplayNode p)
	{
		if ((c == null) || (p == null) || (p.getLeftChild() != c) || (c.getParent() != p))
			throw new RuntimeException("WRONG");

		if (p.getParent() != null)
		{
			if (p.equals(p.getParent().getLeftChild()))
				p.getParent().setLeftChild(c);
			else 
				p.getParent().setRightChild(c);
		}
		if (c.getRightChild() != null)
			c.getRightChild().setParent(p);

		c.setParent(p.getParent());
		p.setParent(c);
		p.setLeftChild(c.getRightChild());
		c.setRightChild(p);
	}

	/** rotate **/
	public void makeRightChildParent(SplayNode c, SplayNode p)
	{
		if ((c == null) || (p == null) || (p.getRightChild() != c) || (c.getParent() != p))
			throw new RuntimeException("WRONG");
		if (p.getParent() != null)
		{
			if (p.equals(p.getParent().getLeftChild()))
				p.getParent().setLeftChild(c);
			else
				p.getParent().setRightChild(c);
		}
		if (c.getLeftChild() != null)
			c.getLeftChild().setParent(p);
		c.setParent(p.getParent());
		p.setParent(c);
		p.setRightChild(c.getLeftChild());
		c.setLeftChild(p);
	}

	/** splay function **/
	private void splay(SplayNode x)
	{
		
		while (x.getParent() != null)
		{
			//Adding my initial size and rank prior to my splay operation
			RankAndSize newRAS = new RankAndSize(x.getData(), getSize(x), getRank(x));
			
			SplayNode Parent = x.getParent();
			SplayNode GrandParent = Parent.getParent();
			if (GrandParent == null)
			{
				if (x.equals(Parent.getLeftChild()))
					makeLeftChildParent(x, Parent);
				else
					makeRightChildParent(x, Parent);                 
			} 
			else
			{
				if (x.equals(Parent.getLeftChild()))
				{
					if (Parent.equals(GrandParent.getLeftChild()))
					{
						makeLeftChildParent(Parent, GrandParent);
						makeLeftChildParent(x, Parent);
					}
					else 
					{
						makeLeftChildParent(x, x.getParent());
						makeRightChildParent(x, x.getParent());
					}
				}
				else 
				{
					if (Parent.equals(GrandParent.getLeftChild()))
					{
						makeRightChildParent(x, x.getParent());
						makeLeftChildParent(x, x.getParent());
					} 
					else 
					{
						makeRightChildParent(Parent, GrandParent);
						makeRightChildParent(x, Parent);
					}
				}
			}
			//placing new size and rank values in the RankAndSize
			//object created prior
			newRAS.setNPX(getSize(x));
			newRAS.setRPX(getRank(x));
			allRanksAndSizes.add(newRAS);
		}
		root = x;

	}
	
	/** function to get size of node **/
	public int getSize(Comparable r){
		return getSize(new SplayNode(r));
	}
	
	/** function to get size of node **/
	public int getSize(SplayNode r){
		if (r == null)
			return 0;
		return (getSize(r.getLeftChild()) + getSize(r.getRightChild()) + 1);
	}
	/** function to get the rank of node using a node **/
	public int getRank(Comparable r){
		return getRank(new SplayNode(r));
	}
	/** function to get the rank of node using a node **/
	public int getRank(SplayNode r){
		return (int) ( (int) Math.log(getSize(r)) / Math.log(2));
	}
	
	/** function to remove minimum element **/
	public void removeMin(){
		SplayNode temp = root;
		SplayNode min = null;
		while (temp != null){
			min = temp;
			temp = temp.getLeftChild();
		}
		remove(min);
	}
	
	/** function to remove maximum element **/
	public void removeMax(){
		SplayNode temp = root;
		SplayNode max = null;
		while (temp != null){
			max = temp;
			temp = temp.getRightChild();
		}
		remove(max);
	}
	
	/** function to remove element **/
	public void remove(Comparable ele)
	{
		SplayNode node = findNode(ele);
		if (node.getData().compareTo(ele) != 0)
			return;
		remove(node);
	}

	/** function to remove node **/
	private void remove(SplayNode node)
	{
		if (node == null)
			return;

		splay(node);
		if( (node.getLeftChild() != null) && (node.getRightChild() !=null))
		{ 
			SplayNode min = node.getLeftChild();
			while(min.getRightChild()!=null)
				min = min.getRightChild();

			min.setRightChild(node.getRightChild());
			node.getRightChild().setParent(min);
			node.getLeftChild().setParent(null);
			root = node.getLeftChild();
		}
		else if (node.getRightChild() != null)
		{
			node.getRightChild().setParent(null);
			root = node.getRightChild();
		} 
		else if( node.getLeftChild() !=null)
		{
			node.getLeftChild().setParent(null);
			root = node.getLeftChild();
		}
		else
		{
			root = null;
		}
		node.setParent(null);
		node.setLeftChild(null);
		node.setRightChild(null);
		node = null;
		count--;
	}

	/** Functions to count number of nodes **/
	public int countNodes()
	{
		return count;
	}

	/** Functions to search for an element **/
	public boolean search(Comparable val)
	{
		return findNode(val) != null;
	}
	private SplayNode findNode(Comparable ele)
	{
		SplayNode z = root;
		SplayNode p = null;
		while (z != null)
		{
			p = z;
			if (ele.compareTo(z.getData()) > 0)  
				z = z.getRightChild();
			else if (ele.compareTo(z.getData()) < 0) 
				z = z.getLeftChild();
			else{
				splay(z);
				return z;
			}
		}
		splay(p);
		return p;
	}
	
	/** function to retrieve the ranks and sizes **/
	public ArrayList<RankAndSize> getAllRanksAndSizes(){
		return allRanksAndSizes;
	}

	/** Function for inorder traversal **/ 
	public void inorder()
	{
		System.out.println("Inorder");
		inorder(root);
		System.out.println(); //new line print
	}
	private void inorder(SplayNode r)
	{
		
		if (r != null)
		{
			inorder(r.getLeftChild());
			System.out.print(r.getData() +" ");
			inorder(r.getRightChild());
		}
		
	}

	/** Function for preorder traversal **/
	public void preorder()
	{
		preorder(root);
		System.out.println(); //new line print
	}
	private void preorder(SplayNode r)
	{
		if (r != null)
		{
			System.out.print(r.getData() +" ");
			preorder(r.getLeftChild());             
			preorder(r.getRightChild());
		}
		
	}

	/** Function for postorder traversal **/
	public void postorder()
	{
		postorder(root);
		System.out.println(); //new line print
	}
	private void postorder(SplayNode r)
	{
		if (r != null)
		{
			postorder(r.getLeftChild());             
			postorder(r.getRightChild());
			System.out.print(r.getData() +" ");
		}
		
	}     
}
